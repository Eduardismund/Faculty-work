
from src.domain import expense

class RepoException(Exception):
    pass

class MemoryRepository:
    """
    it saves the data in memory
    """

    def __init__(self):
        """
        stack for operations
        data for current modification
        """
        self._data={}
        self._stack=[]

    def add(self, new_expense: expense, value):
        """
        adds a new expense from the console
        :param value: True if value inserted from console, False if autogenerated at start-up
        if True, the stack receives the operation, with number 2 as a marker for undo, knowing an addition has been done
        """
        if new_expense.amount not in self._data:
            self._data[new_expense.amount]=new_expense

        if value == True:
            operation=[2, new_expense]
            self._stack.append(operation)

    def filter(self, amount_above):
        """
        Filters the dictionary data above a certain value
        :param amount_above: the filter value, anything below deleted
        the stack receives the deleted expenses, in case of undo, to add them back
        """
        operation=[1]
        filtered_dict={}
        for exp in self._data.values():
            if int(exp.amount)> amount_above:
                filtered_dict[exp.amount] = exp
            else:
                operation.append(exp)
        self._data = filtered_dict.copy()
        self._stack.append(operation)

    def add_expenses(self, list_of_expenses):
        """adds a list of expenses back in the dictionary"""
        for new_expense in list_of_expenses:
            self._data[new_expense.amount]= new_expense

    def undo_last_operation(self):
        """
        if undo has been chosen, every addition is reverted by deleting the added elements saved in the stack, or in
        case of a filter, they are added back in, the marks 1 or 2 in front of the stack operation guiding so
        """
        if len(self._stack)==0:
            print("Nothing to undo!")
            return RepoException("Nothing to undo!")
        operation=self._stack[-1]
        self._stack.pop()

        if operation[0]==1:
            self.add_expenses(operation[1:])

        else:
            self.delete_expense(operation[1])

    def delete_expense(self, expense_to_delete):
        """deletes an expense"""
        del self._data[expense_to_delete.amount]

    def get_all(self):
        """returns the dictionary values"""
        return list(self._data.values())
